# -*- coding: utf-8 -*-
"""DBM_Research_Paper1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qTtPwStGtzS2HuSjh8jAAxryzGRGLDVy
"""

#importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

df = pd.read_csv('/Users/beta/College/DBM/SEM 3/Research Paper/HR-Employee-Attrition.csv')

df

#checking for missing values
df.isnull().sum().sum()

df.nunique()

#dropping columns with only one unique value
df = df.drop(columns = ['EmployeeCount','Over18','StandardHours','EmployeeNumber'])

df.isnull().sum().sum()

df.dtypes

encoding_dict = {'Non-Travel': 1, 'Travel_Rarely': 2, 'Travel_Frequently': 3}

# Apply custom encoding
df['BusinessTravel'] = df['BusinessTravel'].map(encoding_dict)

label_encoder = LabelEncoder()
for column in ['Attrition','Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus', 'OverTime']:  # Columns to be label encoded
    df[column] = label_encoder.fit_transform(df[column])

df

# Calculate correlation matrix
corr = df.corr()

# Create a heatmap
plt.figure(figsize=(10, 10))
sns.heatmap(corr, annot=True, fmt=".2f", annot_kws={"size": 5})
plt.title('Correlation Heatmap')
plt.show()

# Split data into features and target variable
X = df.drop('Attrition', axis=1)
y = df['Attrition']

#Standardizing the data
# Initialize the StandardScaler
scaler = StandardScaler()

# Fit the scaler to the data and transform the data
scaled_data = scaler.fit_transform(X)

# Convert the scaled data back to a DataFrame
X = pd.DataFrame(scaled_data, columns=X.columns)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
models = {
    "Logistic Regression": LogisticRegression(random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "SVM": SVC(random_state=42)
}

# Train and evaluate models
accuracies = []
model_names = []
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    model_names.append(name)

# Plotting
plt.figure(figsize=(6, 4))
plt.bar(model_names, accuracies, color='skyblue', width = 0.4)
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Accuracy of Different Models')
plt.ylim([0, 1])  # Set y-axis limit from 0 to 1
plt.tight_layout()
plt.show()

